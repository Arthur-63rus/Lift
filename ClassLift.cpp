/* --- lift.cpp ------------------------------------------------------------------------------------------- **
 *  
 * -------------------------------------------------------------------------------------------------------- */
#include <cstdio>
#include <cstdlib>
#include <conio.h>
#include "ClassLift.h"
#include "MyStr.h"

/* -------------------------------------------------------------------------------------------------------- **
 * Название :  TLift
 * Описание :  Конструктор класса TLift
 * Параметры:  Low, High - нижний и верхний этажи здания, к кторым ходит лифт
 * Результат:  нет
 * -------------------------------------------------------------------------------------------------------- */
TLift::TLift(int Low, int High)
{
  LowFloor = Low;
  HiFloor = High;
  TotalFloor = -Low + High+1;

  // Инициализация списка вызовов с этажей
  ListFloorCall = new int[TotalFloor];
  CntFloorCall = 0;
  // Инициализация списка вызовов из кабины лифта
  ListCabinCall = new int[TotalFloor];
  CntCabinCall = 0;

  // Задаем случайный начальный этаж
  CurrFloor = (rand() % TotalFloor)+Low;
  // Начальное состояние лифта: Остановлен, двери закрыты
  LiftState = LiftStop;
  // Направление движения лифта: Не определено
  LiftDir = LiftUn;
}

/* -------------------------------------------------------------------------------------------------------- **
 * Название :  ~TLift
 * Описание :  Деструктор класса TLift
 * Параметры:  нет
 * Результат:  нет
 * -------------------------------------------------------------------------------------------------------- */
TLift::~TLift()
{
  delete [] ListFloorCall;
  delete [] ListCabinCall;
}

/* -------------------------------------------------------------------------------------------------------- **
 * Название :  ShowInfo
 * Описание :  Отображение начального состояния
 * Параметры:  нет
 * Результат:  нет
 * -------------------------------------------------------------------------------------------------------- */
TLift::ShowInfo()
{
  printf(StrLiftParam);
  printf(StrTotalFl, TotalFloor);
  printf(StrRangeFl,  LowFloor, HiFloor);
  printf(StrStartCond);
  printf(StrCurrFl, CurrFloor);
  printf(StrLiftEmp);
  printf(StrCmd1);
  printf(StrCmd2);
  printf(StrCmd3);
  printf(StrCmd4);
}

/* -------------------------------------------------------------------------------------------------------- **
 * Название :  ShowStatus
 * Описание :  Отображение текущего состояния
 * Параметры:  нет
 * Результат:  нет
 * -------------------------------------------------------------------------------------------------------- */
TLift::ShowStatus()
{
  printf (StrCabinOnFloor, CurrFloor);
  if (LiftState == LiftMove)
  { if (LiftDir == LiftUp)
      printf (StrGoingUp);
    if (LiftDir == LiftDown)
      printf (StrGoingDown);
    printf (StrPressAnyKey);
  }
  else
  { printf (StrStopped);
    if (LiftState == LiftOpen)
    { printf (StrDoorsOpened, CurrFloor);
      printf (StrPressAnyKey);
	}
    else
      printf (StrDoorsClosed, CurrFloor);
  }
}

/* -------------------------------------------------------------------------------------------------------- **
 * Название :  MoveLift
 * Описание :  Перемещает лифт на 1 этаж
 * Параметры:  dir - определяет направление перемещения
 * Результат:  нет
 * -------------------------------------------------------------------------------------------------------- */
void TLift::Action()
{
clock_t TimeComeFloor;
clock_t CurClock;
int OpenDoorTimeout;

  for(;;)
  { 
    switch (LiftState)
    { // Если лифт остановлен и двери закрыты, то будем считать, что внутри никого нет
      // и вызов может быть сделан только с этажа
      case LiftStop:							// Лифт остановлен, двери закрыты
  	    if ( CheckCalls(CurrFloor) )			// Проверка вызовов на этом этаже
  	    { LiftState = LiftOpen;
          ResetOpenDoorTimer();
          ShowStatus();
          break;
		}
        if ((LiftDir = SelectDirection(CurrFloor, LiftDir)) == LiftUn)
          return;
        LiftState = LiftMove;
        break;
      
	  case LiftOpen:							// Лифт остановлен, двери открыты
        while (!CheckDoorTimeout())
        { if (kbhit())  						// Идет новая команда
            return;
        }
        LiftState = LiftStop;
        ShowStatus();
        // Если больше никуда не едем - выходим и ждем новых команд
        if ((LiftDir = SelectDirection(CurrFloor, LiftDir)) == LiftUn)
          return;
		LiftState = LiftMove;
        break;
      
	  case LiftMove:							// Лифт двигается
        ShowStatus();
        TimeComeFloor = clock() + CLOCKS_PER_SEC*LiftSpeed;
	    for(;;)									// Двигаемся к следующему этажу
        { CurClock = clock();
          if ( CurClock > TimeComeFloor )
            break;
          if (kbhit())  						// Идет новая команда
	        return;
        }
  
        if ( LiftDir == LiftUp )				// Лифт приехал на этаж выше
          CurrFloor++;
        if ( LiftDir == LiftDown )				// Лифт приехал на этаж ниже
          CurrFloor--;
  	    
  	    if ( CheckCalls(CurrFloor) )			// Проверка наличия вызова на этом этаже
  	    { LiftState = LiftOpen;
          ResetOpenDoorTimer();
          ShowStatus();
		}
		break;
    }
  }
}

/* -------------------------------------------------------------------------------------------------------- **
 * Название :  AddFloorCall
 * Описание :  Добавляет вызов лифта с этажа в список
 * Параметры:  Floor - этаж, на который вызывается лифт
 * Результат:  true - этаж добавлен в список
 * -------------------------------------------------------------------------------------------------------- */
bool TLift::AddFloorCall(int Floor)
{ // Проверка, не находится лифт уже на этом этаже
  if (Floor == CurrFloor)
  { if (LiftState == LiftOpen)
    { printf(StrOnSameFloor);
      return(false);
	}
  }
  // Проверка, что этаж входит в допустимый диапазон и с этого этажа возможен вызов
  if (CheckFloor(Floor, FlCall) == false)
    return(false);
  // Добавляем этаж в список
  if (AddToList(Floor, ListFloorCall, &CntFloorCall))
  { printf(StrFloorCall, Floor, Floor);
    return(true);
  }
  return(false);
}

/* -------------------------------------------------------------------------------------------------------- **
 * Название :  RemoveFloorCall
 * Описание :  Убирает вызов лифта с этажа из списка
 * Параметры:  Floor - этаж, на который вызывается лифт
 * Результат:  true - этаж добавлен в список
 * -------------------------------------------------------------------------------------------------------- */
bool TLift::RemoveFloorCall(int Floor)
{ // Проверка, что этаж входит в допустимый диапазон и с этого этажа возможен вызов
  if (CheckFloor(Floor, FlCall) == false)
    return(false);
  // Удаляем этаж из очереди
  return(RemoveFromList(Floor, ListFloorCall, &CntFloorCall));
}

/* -------------------------------------------------------------------------------------------------------- **
 * Название :  AddCabinCall
 * Описание :  Добавляет вызов с кабины лифта в список
 * Параметры:  Floor - этаж, на который вызывается лифт
 * Результат:  true - этаж добавлен в список
 * -------------------------------------------------------------------------------------------------------- */
bool TLift::AddCabinCall(int Floor)
{ // Проверка, не находится лифт уже на этом этаже
  if (Floor == CurrFloor)
  { if (LiftState == LiftOpen)
    { printf(StrOnSameFloor);
      return(false);
	}
  }
  // Проверка, что этаж входит в допустимый диапазон и с этого этажа возможен вызов
  if (CheckFloor(Floor, FlCall) == false)
    return(false);
  // Добавляем этаж в очередь
  if (AddToList(Floor, ListCabinCall, &CntCabinCall))
  { if (CntCabinCall == 1)	       	// Первый вызов в лифте
    { if (LiftState == LiftStop)	// Надо сначала открыть двери
	    printf(StrFloorStopOpened, CurrFloor);
	  printf(StrEnterCabinCall, Floor, Floor);
	}
    else
      printf(StrCabinCall, Floor, Floor);
    return(true);
  }
  return(false);
}

/* -------------------------------------------------------------------------------------------------------- **
 * Название :  RemoveCabinCall
 * Описание :  Убирает вызов с кабины лифта из список
 * Параметры:  Floor - этаж, на который вызывается лифт
 * Результат:  true - этаж добавлен в список
 * -------------------------------------------------------------------------------------------------------- */
bool TLift::RemoveCabinCall(int Floor)
{ // Проверка, что этаж входит в допустимый диапазон и с этого этажа возможен вызов
  if (CheckFloor(Floor, FlCall) == false)
    return(false);
  // Удаляем этаж из очереди
  return(RemoveFromList(Floor, ListCabinCall, &CntCabinCall));
}

/* -------------------------------------------------------------------------------------------------------- **
 * Название :  AddToList
 * Описание :  Добавляет вызов лифта в список
 * Параметры:  Floor - номер этажа
 *             *List - указатель на список, в который добавляется этаж
 *             *Cnt - указатель на длину списка
 * Результат:  true - этаж добавлен в список
 * -------------------------------------------------------------------------------------------------------- */
bool TLift::AddToList(int Floor, int *List, int *Cnt)
{ 
  // Проверка наличия вызова на этаж в списке
  if ( FindInList(Floor, List, *Cnt) != -1 )
  { printf(StrFlAlreadyAdd);
    return(false);
  }
  // Добавление вызова на этаж в списоок
  List[*Cnt] = Floor;
  (*Cnt)++;
  return(true);
}

/* -------------------------------------------------------------------------------------------------------- **
 * Название :  RemoveFromList
 * Описание :  Убирает вызов лифта из списка
 * Параметры:  Floor - номер этажа
 *             *List - указатель на список, в который добавляется этаж
 *             *Cnt - указатель на длину списка
 * Результат:  true - этаж добавлен в список
 * -------------------------------------------------------------------------------------------------------- */
bool TLift::RemoveFromList(int Floor, int *List, int *Cnt)
{ 
int i;
  // Поиск вызова на этаж в списке
  if ( (i = FindInList(Floor, List, *Cnt)) == -1 )
    return(false);
  // Удаление вызова на этаж из списка
  for ( ; i<*Cnt; i++)
    List[i] = List[i+1];
  (*Cnt)--;
  return(true);
}

/* -------------------------------------------------------------------------------------------------------- **
 * Название :  FindInList
 * Описание :  Поиск этажа в списке
 * Параметры:  Floor - искомый этаж
 *             *List - указатель на список
 *             Cnt - длина списка
 * Результат:  порядковый номер этажа в очереди, если такого этажа нет, то -1
 * -------------------------------------------------------------------------------------------------------- */
int TLift::FindInList(int Floor, int *List, int Cnt)
{ if (Cnt)
  { for (int i=0; i<Cnt; i++)
      if (*List++ == Floor)
        return(i);
  }
  return(-1);
}

/* -------------------------------------------------------------------------------------------------------- **
 * Название :  CheckFloor
 * Описание :  Проверка корректности введеного этажа
 * Параметры:  Floor - проверяемый этаж
 *             type - тип проверки
 * Результат:  true - соответствует критериям
 * -------------------------------------------------------------------------------------------------------- */
bool TLift::CheckFloor(int Floor, TTypeCheck type)
{
  if ((Floor < LowFloor) || (Floor > HiFloor))
  { printf(StrErrFloor);
    return(false);
  }
  return(true);
}

/* -------------------------------------------------------------------------------------------------------- **
 * Название :  CheckCalls
 * Описание :  Обработка вызовов лифта (с этажей или из кабины)
 * Параметры:  Floor - проверяемый этаж
 *             type - тип проверки
 * Результат:  true - текущий этаж был списке вызовов
 * -------------------------------------------------------------------------------------------------------- */
bool TLift::CheckCalls(int Floor)
{
  if (RemoveCabinCall(Floor))		// При удалении проверяем присутствие этажа в списке вызовов из кабины
  { RemoveFloorCall(Floor);			// Если есть в списке вызовов с этажа, то и отсюда удаляем
    return(true);
  }
  if (RemoveFloorCall(Floor))		// При удалении проверяем присутствие этажа в списке вызовов с этажа
    return(true);
  return(false);
}
/* -------------------------------------------------------------------------------------------------------- **
 * Название :  ResetOpenDoorTimer
 * Описание :  Сброс счетчика времени открытой двери
 * Параметры:  нет
 * Результат:  нет
 * -------------------------------------------------------------------------------------------------------- */
TLift::ResetOpenDoorTimer()
{
  OpenDoorTimer = clock();
}

/* -------------------------------------------------------------------------------------------------------- **
 * Название :  CheckDoorTimeout
 * Описание :  Проверка интервала времени
 * Параметры:  Timeout 
 * Результат:  true - если таймаут вышел
 * -------------------------------------------------------------------------------------------------------- */
bool TLift::CheckDoorTimeout()
{
  return((OpenDoorTimer + OpenDoorTime*CLOCKS_PER_SEC ) < clock());
}

/* -------------------------------------------------------------------------------------------------------- **
 * Название :  SelectDirection
 * Описание :  Определение дальнейшего направления движения лифта
 * Параметры:  нет
 * Результат:  дальнейшее направление движения
 * -------------------------------------------------------------------------------------------------------- */
TLiftDir TLift::SelectDirection(int Floor, TLiftDir CurDir)
{
TLiftDir Dir;
  // Приоритет вызовов из кабины лифта
  if ((Dir = CheckDirection(Floor, CurDir, ListCabinCall, CntCabinCall)) != LiftUn)
    return(Dir);
  // Если нет вызовов из кабины, проверям вызовы с этажей
  return(Dir = CheckDirection(Floor, CurDir, ListFloorCall, CntFloorCall));
}

/* -------------------------------------------------------------------------------------------------------- **
 * Название :  CheckDirection
 * Описание :  Проверка возможности движения лифта в том же направлении для заданного списка вызовов
 * Параметры:  Floor - текущий этаж
 *             Dir - текущее направление движения
 *             *List - указатель на список вызовов
 *             Cnt - длина списка
 * Результат:  дальнейшее направление движения
 * -------------------------------------------------------------------------------------------------------- */
TLiftDir TLift::CheckDirection(int Floor, TLiftDir CurDir, int *List, int Cnt)
{
  if (CurDir == LiftUn)			// Если направление ранее не было определено
  { if (Cnt)					// и есть вызов в списке
	{ if (List[0] > Floor)		// то направление определям по первому пришедшему вызовы
        return(LiftUp);
	  if (List[0] < Floor)
        return(LiftDown);
	}
    return(LiftUn);				// Если нет необходимости ехать в какую либо сторону возвращаем "Не определено" 
  }
  for (int i=0; i<Cnt; i++)		// Сначала проверим необходимость движения в текущем направлении
  { if (CurDir == LiftUp)
	{ if (List[i] > Floor)
        return(LiftUp);
    }
    if (CurDir == LiftDown)
	{ if (List[i] < Floor)
        return(LiftDown);
	}
  }
  for (int i=0; i<Cnt; i++)		// Теперь проверим необходимость движения в противоположном направлении
  { if (CurDir == LiftUp)
	{ if (List[i] < Floor)
        return(LiftDown);
    }
    if (CurDir == LiftDown)
	{ if (List[i] > Floor)
        return(LiftUp);
	}
  }
  return(LiftUn);				// Если нет необходимости ехать в какую либо сторону возвращаем "Не определено" 
}

/* --------------------------------------------( end of file )--------------------------------------------- */

